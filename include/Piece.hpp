// Piece.hpp

#ifndef PIECE_H
#define PIECE_H

#include <unordered_map>
#include <array>
#include <vector>

#include <SFML/System.hpp>


enum class PieceType {
	I, J, L, O, S, T, Z
};

typedef std::array<std::array<bool, 4>, 4> piece_pattern;




class Piece
{
public:
	Piece (PieceType type, sf::Vector2i pos, int rotation = 0);

	piece_pattern get_pattern () const;
	sf::Vector2i get_pos () const;
	PieceType get_type () const;

	void move_down();
	void move_left();
	void move_right();
	void rotate_right();
	void rotate_left();

	static constexpr int box_size = 4;

private:
	PieceType type;
	sf::Vector2i pos;
	int rotation; 
};



const std::unordered_map<PieceType, std::vector<piece_pattern>> piece_rotation_pattern { 
	{ PieceType::I, {
		{{
			{{ 0,0,0,0 }},
			{{ 0,0,0,0 }},
			{{ 1,1,1,1 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,1,0,0 }},
			{{ 0,1,0,0 }},
			{{ 0,1,0,0 }},
			{{ 0,1,0,0 }}
		}}, 
		{{
			{{ 0,0,0,0 }},
			{{ 1,1,1,1 }},
			{{ 0,0,0,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,0,1,0 }},
			{{ 0,0,1,0 }},
			{{ 0,0,1,0 }},
			{{ 0,0,1,0 }}
		}}
	}},

	{ PieceType::J, {
		{{
			{{ 1,1,1,0 }},
			{{ 0,0,1,0 }},
			{{ 0,0,0,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,0,1,0 }},
			{{ 0,0,1,0 }},
			{{ 0,1,1,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,0,0,0 }},
			{{ 1,0,0,0 }},
			{{ 1,1,1,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 1,1,0,0 }},
			{{ 1,0,0,0 }},
			{{ 1,0,0,0 }},
			{{ 0,0,0,0 }}
		}}
	}},

	{ PieceType::L, {
		{{
			{{ 1,1,1,0 }},
			{{ 1,0,0,0 }},
			{{ 0,0,0,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,1,1,0 }},
			{{ 0,0,1,0 }},
			{{ 0,0,1,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,0,0,0 }},
			{{ 0,0,1,0 }},
			{{ 1,1,1,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 1,0,0,0 }},
			{{ 1,0,0,0 }},
			{{ 1,1,0,0 }},
			{{ 0,0,0,0 }}
		}}
	}},

	{ PieceType::O, {
		{{
			{{ 0,0,0,0 }},
			{{ 0,1,1,0 }},
			{{ 0,1,1,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,0,0,0 }},
			{{ 0,1,1,0 }},
			{{ 0,1,1,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,0,0,0 }},
			{{ 0,1,1,0 }},
			{{ 0,1,1,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,0,0,0 }},
			{{ 0,1,1,0 }},
			{{ 0,1,1,0 }},
			{{ 0,0,0,0 }}
		}}
	}},

	{ PieceType::S, {
		{{
			{{ 0,1,1,0 }},
			{{ 1,1,0,0 }},
			{{ 0,0,0,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,1,0,0 }},
			{{ 0,1,1,0 }},
			{{ 0,0,1,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,0,0,0 }},
			{{ 0,1,1,0 }},
			{{ 1,1,0,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 1,0,0,0 }},
			{{ 1,1,0,0 }},
			{{ 0,1,0,0 }},
			{{ 0,0,0,0 }}
		}}
	}},

	{ PieceType::T, {
		{{
			{{ 1,1,1,0 }},
			{{ 0,1,0,0 }},
			{{ 0,0,0,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,0,1,0 }},
			{{ 0,1,1,0 }},
			{{ 0,0,1,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,0,0,0 }},
			{{ 0,1,0,0 }},
			{{ 1,1,1,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 1,0,0,0 }},
			{{ 1,1,0,0 }},
			{{ 1,0,0,0 }},
			{{ 0,0,0,0 }}
		}}
	}},

	{ PieceType::Z, {
		{{
			{{ 1,1,0,0 }},
			{{ 0,1,1,0 }},
			{{ 0,0,0,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,0,1,0 }},
			{{ 0,1,1,0 }},
			{{ 0,1,0,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,0,0,0 }},
			{{ 1,1,0,0 }},
			{{ 0,1,1,0 }},
			{{ 0,0,0,0 }}
		}}, 
		{{
			{{ 0,1,0,0 }},
			{{ 1,1,0,0 }},
			{{ 1,0,0,0 }},
			{{ 0,0,0,0 }}
		}}
	}}
};




#endif
